{"version":3,"file":"ng-payment-card.js.map","sources":["ng://ng-payment-card/lib/validator/card-validator.ts","ng://ng-payment-card/lib/domain/card-type.enum.ts","ng://ng-payment-card/lib/domain/card-types.ts","ng://ng-payment-card/lib/domain/month.enum.ts","ng://ng-payment-card/lib/service/payment-card.service.ts","ng://ng-payment-card/lib/payment-card.component.ts","ng://ng-payment-card/lib/pipe/payment-card-number/payment-card-number.pipe.ts","ng://ng-payment-card/lib/pipe/valid-thru/valid-thru.pipe.ts","ng://ng-payment-card/lib/ng-payment-card.module.ts"],"sourcesContent":["import { AbstractControl, FormGroup, ValidationErrors } from '@angular/forms';\n\n/**\n * Collection of validation methods\n */\nexport class CardValidator {\n  /**\n   * Custom error for alphanumeric input\n   */\n  private static NUMBERS_ONLY_ERR: ValidationErrors = {\n    numbersOnly: true,\n  };\n\n  /**\n   * Custom error for invalid checksum\n   */\n  private static CHECKSUM_INVALID: ValidationErrors = {\n    checksum: true,\n  };\n\n  /**\n   * Custom error for expired card\n   */\n  private static CARD_EXPIRED: ValidationErrors = {\n    expiration: true,\n  };\n\n  /**\n   * Check if control contains numbers only\n   */\n  public static numbersOnly(abstractCtrl: AbstractControl): ValidationErrors | null {\n    const ccNum: string = abstractCtrl.value;\n    const NUMBERS_ONLY: RegExp = new RegExp(/^[0-9]+$/);\n    return !NUMBERS_ONLY.test(ccNum) ? CardValidator.NUMBERS_ONLY_ERR : null;\n  }\n\n  /**\n   * Check checksum number in card number using Luhn algorithm\n   */\n  public static checksum(abstractCtr: AbstractControl): ValidationErrors | null {\n    const ccNumber: string = abstractCtr.value;\n    const luhnArray: Array<number> = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];\n    let length: number = ccNumber ? ccNumber.length : 0;\n    let sum = 0;\n    let shouldMultiply = true;\n\n    while (length) {\n      const val: number = parseInt(ccNumber.charAt(--length), 10);\n      sum += (shouldMultiply = !shouldMultiply) ? luhnArray[val] : val;\n    }\n    return !(sum && sum % 10 === 0) ? CardValidator.CHECKSUM_INVALID : null;\n  }\n\n  /**\n   * Check validity of the card\n   */\n  public static expiration(formGroup: FormGroup): ValidationErrors | null {\n    const expirationMonth: number = Number(formGroup.get('expirationMonth').value);\n    const expirationYear: number = Number(formGroup.get('expirationYear').value);\n    const expirationDate: Date = new Date(expirationYear, expirationMonth + 1, 0);\n    return new Date().getTime() > expirationDate.getTime() ? CardValidator.CARD_EXPIRED : null;\n  }\n}\n","export enum CardType {\n  AMERICAN_EXPRESS = 'American Express',\n  DINERS = 'Diners',\n  DINERS_CARTE_BLANCHE = 'Diners Carte Blanche',\n  DISCOVER_CLUB = 'Discover Club',\n  CHINA_UNIONPAY = 'China UnionPay',\n  JCB = 'JCB',\n  LASER = 'Laser',\n  MAESTRO = 'Maestro',\n  MASTERCARD = 'Mastercard',\n  VISA_ELECTRON = 'Visa Electron',\n  VISA = 'VISA',\n}\n","import { CardType } from './card-type.enum';\n\nconst CARD_TYPES: Map<string, RegExp> = new Map();\nCARD_TYPES.set(CardType.AMERICAN_EXPRESS, new RegExp('^3[47]'));\nCARD_TYPES.set(CardType.DINERS, new RegExp('^36'));\nCARD_TYPES.set(CardType.DINERS_CARTE_BLANCHE, new RegExp('^30[0-5]'));\nCARD_TYPES.set(\n  CardType.DISCOVER_CLUB,\n  new RegExp('^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)')\n);\nCARD_TYPES.set(CardType.CHINA_UNIONPAY, new RegExp('^(62[0-9]{14,17})$'));\nCARD_TYPES.set(CardType.JCB, new RegExp('^35(2[89]|[3-8][0-9])'));\nCARD_TYPES.set(CardType.LASER, new RegExp('^(6304|6706|6709|6771)[0-9]{12,15}$'));\nCARD_TYPES.set(CardType.MAESTRO, new RegExp('^(50|5[6-8]|6)[0-9]{12,19}$'));\nCARD_TYPES.set(\n  CardType.MASTERCARD,\n  new RegExp('^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$')\n);\nCARD_TYPES.set(CardType.VISA_ELECTRON, new RegExp('^(4026|417500|4508|4844|491([37]))'));\nCARD_TYPES.set(CardType.VISA, new RegExp('^4'));\n\nexport default CARD_TYPES;\nexport type CardTypesContainer = typeof CARD_TYPES;\n","export enum Month {\n  JANUARY = '01',\n  FEBRUARY = '02',\n  MARCH = '03',\n  APRIL = '04',\n  MAY = '05',\n  JUNE = '06',\n  JULY = '07',\n  AUGUST = '08',\n  SEPTEMBER = '09',\n  OCTOBER = '10',\n  NOVEMBER = '11',\n  DECEMBER = '12',\n}\n","import { Injectable } from '@angular/core';\n\nimport { default as CARD_TYPES, CardTypesContainer } from '../domain/card-types';\nimport { Month } from '../domain/month.enum';\n\n@Injectable()\nexport class PaymentCardService {\n  /**\n   * Collection of card types\n   */\n  private static readonly cardTypes: CardTypesContainer = CARD_TYPES;\n\n  /**\n   * Return card type based on card number\n   */\n  public static getCardType(ccNum: string): string | null {\n    for (const [key, val] of Array.from(PaymentCardService.cardTypes.entries())) {\n      if (\n        ccNum\n          .split(new RegExp('[ \\\\-]'))\n          .join('')\n          .match(val)\n      ) {\n        return key;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Return months in numerical format\n   */\n  public static getMonths(): Array<Month> {\n    const months: Array<Month> = [];\n    for (const key of Object.keys(Month)) {\n      months.push(Month[key]);\n    }\n    return months;\n  }\n\n  /**\n   * Return years based on current year\n   */\n  public static getYears(): Array<number> {\n    const years: Array<number> = [];\n    const year = new Date().getFullYear();\n    for (let i = -2; i < 5; i++) {\n      years.push(year + i);\n    }\n    return years;\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { CardValidator } from './validator/card-validator';\nimport { ICardDetails } from './domain/i-card-details';\nimport { CardDetails } from './domain/card-details';\nimport { PaymentCardService } from './service/payment-card.service';\n\n/**\n * NgPaymentCard without any dependencies other then ReactiveFormsModule\n */\n@Component({\n  selector: 'ng-payment-card',\n  templateUrl: './payment-card.component.html',\n  styleUrls: ['./payment-card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PaymentCardComponent implements OnInit {\n  /**\n   * FormGroup available publicly\n   */\n  public ccForm: FormGroup;\n\n  /**\n   * List of months\n   */\n  public months: Array<string> = [];\n\n  /**\n   * List of years\n   */\n  public years: Array<number> = [];\n\n  /**\n   * Validation message for missing payment card number\n   */\n  @Input()\n  public ccNumMissingTxt? = 'Card number is required';\n\n  /**\n   * Validation message for too short payment card number\n   */\n  @Input()\n  public ccNumTooShortTxt? = 'Card number is too short';\n\n  /**\n   * Validation message for too long payment card number\n   */\n  @Input()\n  public ccNumTooLongTxt? = 'Card number is too long';\n\n  /**\n   * Validation message for payment card number that contains characters other than digits\n   */\n  @Input()\n  public ccNumContainsLettersTxt? = 'Card number can contain digits only';\n\n  /**\n   * Validation message for invalid payment card  number (Luhn's validation)\n   */\n  @Input()\n  public ccNumChecksumInvalidTxt? = 'Provided card number is invalid';\n\n  /**\n   * Validation message for missing card holder name\n   */\n  @Input()\n  public cardHolderMissingTxt? = 'Card holder name is required';\n\n  /**\n   * Validation message for too long card holder name\n   */\n  @Input()\n  public cardHolderTooLongTxt? = 'Card holder name is too long';\n\n  /**\n   * Validation message for missing expiration month\n   */\n  @Input()\n  public expirationMonthMissingTxt? = 'Expiration month is required';\n\n  /**\n   * Validation message for missing expiration year\n   */\n  @Input()\n  public expirationYearMissingTxt? = 'Expiration year is required';\n\n  /**\n   * Validation message for missing CCV number\n   */\n  @Input()\n  public ccvMissingTxt? = 'CCV number is required';\n\n  /**\n   * Validation message for too short CCV number\n   */\n  @Input()\n  public ccvNumTooShortTxt? = 'CCV number is too short';\n\n  /**\n   * Validation message for too long CCV number\n   */\n  @Input()\n  public ccvNumTooLongTxt? = 'CCV number is too long';\n\n  /**\n   * Validation message for incorrect CCV number containing characters other than digits\n   */\n  @Input()\n  public ccvContainsLettersTxt? = 'CCV number can contain digits only';\n\n  /**\n   * Validation message for expired card\n   */\n  @Input()\n  public cardExpiredTxt? = 'Card has expired';\n\n  /**\n   * Switch validation of the payment card number\n   */\n  @Input()\n  public validateCCNum? = true;\n\n  /**\n   * Switch validation of the payment card holder\n   */\n  @Input()\n  public validateCardHolder? = true;\n\n  /**\n   * Switch validation of the payment card expiration month\n   */\n  @Input()\n  public validateExpirationMonth? = true;\n\n  /**\n   * Switch validation of the payment card expiration year\n   */\n  @Input()\n  public validateExpirationYear? = true;\n\n  /**\n   * Switch validation of the payment card expiration\n   */\n  @Input()\n  public validateCardExpiration? = true;\n\n  /**\n   * Switch validation of the payment card CCV number\n   */\n  @Input()\n  public validateCCV? = true;\n\n  /**\n   * EventEmitter for payment card object\n   */\n  @Output()\n  public formSaved: EventEmitter<ICardDetails> = new EventEmitter<CardDetails>();\n\n  constructor(private _ccService: PaymentCardService, private _fb: FormBuilder) {}\n\n  public ngOnInit(): void {\n    this.buildForm();\n    this.assignDateValues();\n  }\n\n  /**\n   * Populate months and years\n   */\n  private assignDateValues(): void {\n    this.months = PaymentCardService.getMonths();\n    this.years = PaymentCardService.getYears();\n  }\n\n  /**\n   * Build reactive form\n   */\n  private buildForm(): void {\n    this.ccForm = this._fb.group(\n      {\n        cardNumber: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(12),\n            Validators.maxLength(19),\n            CardValidator.numbersOnly,\n            CardValidator.checksum,\n          ]),\n        ],\n        cardHolder: ['', Validators.compose([Validators.required, Validators.maxLength(22)])],\n        expirationMonth: ['', Validators.required],\n        expirationYear: ['', Validators.required],\n        ccv: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(4),\n            CardValidator.numbersOnly,\n          ]),\n        ],\n      },\n      {\n        validator: CardValidator.expiration,\n      }\n    );\n  }\n\n  /**\n   * Returns payment card type based on payment card number\n   */\n  public getCardType(ccNum: string): string | null {\n    return PaymentCardService.getCardType(ccNum);\n  }\n\n  /**\n   * Callback function that emits payment card details after user clicks submit, or press enter\n   */\n  public emitSavedCard(): void {\n    const cardDetails: ICardDetails = <CardDetails>this.ccForm.value;\n    this.formSaved.emit(cardDetails);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'paymentCardNumber',\n})\nexport class PaymentCardNumberPipe implements PipeTransform {\n  /**\n   * Transform card number to card format for known numbers\n   */\n  public transform(value: string): string {\n    switch (value.length) {\n      case 15:\n        value = value.replace(/\\b(\\d{4})/, '$1-');\n        value = value.replace(/-(\\d{6})/, '-$1-');\n        return value;\n      case 16:\n        return value.match(/.{4}/g).join('-');\n      default:\n        return value;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'validThru',\n})\nexport class ValidThruPipe implements PipeTransform {\n  /**\n   * Transform month and year into card format\n   */\n  public transform(value: string): string {\n    return value && value.length === 7 ? value.substr(0, 3) + value.substr(5) : '/';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PaymentCardComponent } from './payment-card.component';\nimport { PaymentCardService } from './service/payment-card.service';\nimport { PaymentCardNumberPipe } from './pipe/payment-card-number/payment-card-number.pipe';\nimport { ValidThruPipe } from './pipe/valid-thru/valid-thru.pipe';\n\n/**\n * Monolithic module that is being bundled and published.\n * Depends only on ReactiveFormsModule and CommonModule.\n */\n@NgModule({\n  imports: [ReactiveFormsModule, CommonModule],\n  declarations: [PaymentCardComponent, PaymentCardNumberPipe, ValidThruPipe],\n  providers: [PaymentCardService],\n  exports: [PaymentCardComponent],\n})\nexport class NgPaymentCardModule {}\n"],"names":[],"mappings":"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"}
