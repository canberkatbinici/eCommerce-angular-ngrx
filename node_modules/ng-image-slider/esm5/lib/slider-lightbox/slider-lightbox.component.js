/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NgImageSliderService } from './../ng-image-slider.service';
/** @type {?} */
var youtubeRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/;
/** @type {?} */
var validFileExtensions = ['jpeg', 'jpg', 'gif', 'png'];
/** @type {?} */
var validVideoExtensions = ['mp4'];
var SliderLightboxComponent = /** @class */ (function () {
    /* @ViewChild('lightboxDiv') lightboxDiv;
    @HostListener('window:resize', ['$event'])
    onResize(event) {
        const widthAspectRatio = 16 / 9;
        const heightAspectRatio = 9 / 16;
        console.log('this.lightboxDiv.nativeElement.offsetWidth', this.lightboxDiv.nativeElement.offsetWidth);
        console.log('this.lightboxDiv.nativeElement.offsetHeight', this.lightboxDiv.nativeElement.offsetHeight);
        if (this.lightboxDiv.nativeElement.offsetWidth && this.lightboxDiv.nativeElement.offsetHeight) {
            const calculatedWidth = 480 * (this.lightboxDiv.nativeElement.offsetWidth / this.lightboxDiv.nativeElement.offsetHeight);
            const calculatedHeight = 385 * (this.lightboxDiv.nativeElement.offsetHeight / this.lightboxDiv.nativeElement.offsetWidth);
            console.log('calculated widht and height =>', calculatedWidth, calculatedHeight);

        }
    } */
    function SliderLightboxComponent(sanitizer, imageSliderService) {
        this.sanitizer = sanitizer;
        this.imageSliderService = imageSliderService;
        this.YOUTUBE = 'youtube';
        this.IMAGE = 'image';
        this.VIDEO = 'video';
        this.fileUrl = '';
        this.fileExtension = '';
        this.type = this.IMAGE;
        // @Inputs
        this.videoAutoPlay = false;
        this.direction = 'ltr';
        // @Output
        this.close = new EventEmitter();
        this.prevImage = new EventEmitter();
        this.nextImage = new EventEmitter();
    }
    Object.defineProperty(SliderLightboxComponent.prototype, "currentImageSrc", {
        set: /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            var _this = this;
            if (url && typeof (url) === 'string') {
                this.fileExtension = url.replace(/^.*\./, '');
                if (this.imageSliderService.base64FileExtension(url)
                    && (validFileExtensions.indexOf(this.imageSliderService.base64FileExtension(url).toLowerCase()) > -1
                        || validVideoExtensions.indexOf(this.imageSliderService.base64FileExtension(url).toLowerCase()) > -1)) {
                    this.fileExtension = this.imageSliderService.base64FileExtension(url);
                }
                // verify for youtube url
                /** @type {?} */
                var match_1 = url.match(youtubeRegExp);
                if (match_1 && match_1[2].length === 11) {
                    this.type = '';
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.type = _this.YOUTUBE;
                        url = "" + '//www.youtube.com/embed/' + match_1[2] + (_this.videoAutoPlay ? '?autoplay=1' : '?autoplay=0');
                        _this.fileUrl = _this.sanitizer.bypassSecurityTrustResourceUrl(url);
                    }), 50);
                }
                else if (this.fileExtension && validFileExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                    this.type = this.IMAGE;
                    this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
                }
                else if (this.fileExtension && validVideoExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                    this.type = '';
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.type = _this.VIDEO;
                        _this.fileUrl = _this.sanitizer.bypassSecurityTrustResourceUrl(url);
                    }), 50);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.resetState();
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.closeLightbox = /**
     * @return {?}
     */
    function () {
        this.close.emit();
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.prevImageLightbox = /**
     * @return {?}
     */
    function () {
        this.prevImage.emit();
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.nextImageLightbox = /**
     * @return {?}
     */
    function () {
        this.nextImage.emit();
    };
    /**
     * @return {?}
     */
    SliderLightboxComponent.prototype.resetState = /**
     * @return {?}
     */
    function () {
        this.fileUrl = '';
        this.fileExtension = '';
        this.type = this.IMAGE;
    };
    SliderLightboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'slider-lightbox',
                    template: "<div class=\"ng-image-slider-lightbox\">\n    <div class=\"lightbox-wrapper\" [ngClass]=\"{'error-msg': !fileUrl}\">\n        <a class=\"close\" (click)=\"closeLightbox()\">&times;</a>\n        <div class=\"lightbox-div\" #lightboxDiv>\n            <div class=\"pre-loader\">\n                <div class=\"mnml-spinner\"></div>\n            </div>\n            <!-- Image type -->\n            <img *ngIf=\"type === IMAGE && fileUrl\" [ngClass]=\"{'show': showImage, 'hide': !showImage}\" [src]=\"fileUrl\">\n            <!-- Youtube type -->\n            <iframe *ngIf=\"type === YOUTUBE && fileUrl\"\n                [ngClass]=\"{'show': showImage, 'hide': !showImage}\"\n                [src]=\"fileUrl\"\n                frameborder=\"0\" allowfullscreen></iframe>\n            <!-- Video type -->\n            <video [autoplay]=\"videoAutoPlay\" [ngClass]=\"{'show': showImage, 'hide': !showImage}\" *ngIf=\"type === VIDEO && fileUrl\" controls  controlsList=\"nodownload\">\n                <source [dir]=\"direction\" [src]=\"fileUrl\" type=\"video/mp4\"> Your browser does not support the video tag.\n            </video>\n            <div [dir]=\"direction\" *ngIf=\"!fileUrl\" class=\"invalid-msg\">Invalid file format</div>\n            <div [dir]=\"direction\" *ngIf=\"currentImageTitle\" [ngClass]=\"{'show': showImage, 'hide': !showImage}\" class=\"caption\">{{ currentImageTitle }}</div>\n            <a [ngClass]=\"{'disable': lightboxPrevDisable}\" class=\"prev icons prev-icon\" (click)=\"prevImageLightbox()\">&lsaquo;</a>\n            <a [ngClass]=\"{'disable': lightboxNextDisable}\" class=\"next icons next-icon\" (click)=\"nextImageLightbox()\">&rsaquo;</a>\n        </div>\n    </div>\n</div>"
                }] }
    ];
    /** @nocollapse */
    SliderLightboxComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: NgImageSliderService }
    ]; };
    SliderLightboxComponent.propDecorators = {
        videoAutoPlay: [{ type: Input }],
        currentImageSrc: [{ type: Input }],
        currentImageTitle: [{ type: Input }],
        showImage: [{ type: Input }],
        lightboxPrevDisable: [{ type: Input }],
        lightboxNextDisable: [{ type: Input }],
        direction: [{ type: Input }],
        close: [{ type: Output }],
        prevImage: [{ type: Output }],
        nextImage: [{ type: Output }]
    };
    return SliderLightboxComponent;
}());
export { SliderLightboxComponent };
if (false) {
    /** @type {?} */
    SliderLightboxComponent.prototype.YOUTUBE;
    /** @type {?} */
    SliderLightboxComponent.prototype.IMAGE;
    /** @type {?} */
    SliderLightboxComponent.prototype.VIDEO;
    /** @type {?} */
    SliderLightboxComponent.prototype.fileUrl;
    /** @type {?} */
    SliderLightboxComponent.prototype.fileExtension;
    /** @type {?} */
    SliderLightboxComponent.prototype.type;
    /** @type {?} */
    SliderLightboxComponent.prototype.videoAutoPlay;
    /** @type {?} */
    SliderLightboxComponent.prototype.currentImageTitle;
    /** @type {?} */
    SliderLightboxComponent.prototype.showImage;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxPrevDisable;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxNextDisable;
    /** @type {?} */
    SliderLightboxComponent.prototype.direction;
    /** @type {?} */
    SliderLightboxComponent.prototype.close;
    /** @type {?} */
    SliderLightboxComponent.prototype.prevImage;
    /** @type {?} */
    SliderLightboxComponent.prototype.nextImage;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.sanitizer;
    /** @type {?} */
    SliderLightboxComponent.prototype.imageSliderService;
}
//# sourceMappingURL=data:application/json;base64,